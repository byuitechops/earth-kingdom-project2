// Generated by https://quicktype.io

namespace CanvasModuleGetter
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Module
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("position")]
        public long Position { get; set; }

        [JsonProperty("unlock_at")]
        public object UnlockAt { get; set; }

        [JsonProperty("require_sequential_progress")]
        public bool RequireSequentialProgress { get; set; }

        [JsonProperty("publish_final_grade")]
        public bool PublishFinalGrade { get; set; }

        [JsonProperty("prerequisite_module_ids")]
        public object[] PrerequisiteModuleIds { get; set; }

        [JsonProperty("published")]
        public bool Published { get; set; }

        [JsonProperty("items_count")]
        public long ItemsCount { get; set; }

        [JsonProperty("items_url")]
        public Uri ItemsUrl { get; set; }

        [JsonProperty("items")]
        public Item[] Items { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("position")]
        public long Position { get; set; }

        [JsonProperty("indent")]
        public long Indent { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("module_id")]
        public long ModuleId { get; set; }

        [JsonProperty("html_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri HtmlUrl { get; set; }

        [JsonProperty("external_url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri ExternalUrl { get; set; }

        [JsonProperty("new_tab", NullValueHandling = NullValueHandling.Ignore)]
        public bool? NewTab { get; set; }

        [JsonProperty("published")]
        public bool Published { get; set; }

        [JsonProperty("page_url", NullValueHandling = NullValueHandling.Ignore)]
        public string PageUrl { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("content_id", NullValueHandling = NullValueHandling.Ignore)]
        public long? ContentId { get; set; }
    }

    public partial class Module
    {
        public static Module FromJson(string json) => JsonConvert.DeserializeObject<Module>(json, CanvasModuleGetter.Converter.Settings);
        public static Module[] FromJsonArray(string json) => JsonConvert.DeserializeObject<Module[]>(json, CanvasModuleGetter.Converter.Settings);


    }

    public static class Serialize
    {
        public static string ToJson(this Module self) => JsonConvert.SerializeObject(self, CanvasModuleGetter.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
